package com.mayday.common.web;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mayday.common.service.IChatService;
import com.mayday.common.vo.ChatMessageVO;
import com.mayday.common.vo.ChatRoomVO;
import com.mayday.exception.BizNotEffectedException;
import com.mayday.login.vo.UserVO;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("/chat")
public class ChatController {
	@Inject
	private IChatService chatService; 
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	// 채팅방 리스트
	@RequestMapping(value = "/roomList")
	public void roomList(ChatRoomVO chatRoom,ChatMessageVO chatMessage, HttpServletResponse resp,HttpServletRequest req ,Model model ) {
		HttpSession session = req.getSession();
		UserVO user = (UserVO) session.getAttribute("USER_INFO");
		
		List<ChatRoomVO> chatRoomList = chatService.getChatRoomList(user.getUserId());
		
		for(int i = 0; i < chatRoomList.size(); i++) {
			chatMessage.setRoomId(chatRoomList.get(i).getRoomId());
			chatMessage.setMemId(user.getUserId());
		}
		
		resp.setContentType("application/json; charset=utf-8");
		logger.info("Chat list");
		model.addAttribute("roomList", chatRoomList);
	}
	
	@RequestMapping(value="/chat/{roomId}")
	public void massageList(@PathVariable String roomId,HttpServletRequest req,Model model, HttpServletResponse resp) {
		List<ChatMessageVO> chatMessageList = chatService.getChatMessageList(roomId);
		resp.setContentType("application/json; charset=utf-8");
		
		ChatMessageVO chatMessage = new ChatMessageVO();
		chatMessage.setMessage(req.getParameter("message"));    
		chatMessage.setMemId(req.getParameter("memId"));      
		chatMessage.setMemName(req.getParameter("memName"));
		chatMessage.setRoomId(roomId);
		model.addAttribute("chatMessageList", chatMessageList);
	}
	// 채팅방 개설
	@ResponseBody
	@PostMapping(value = "/createroom")
	public String createRoom(HttpServletRequest req) {
		String	 roomId= req.getParameter("roomId") ;     
		String	 userId = req.getParameter("userId") ;     
		String	 userName= req.getParameter("userName") ;   
		String	 expertId= req.getParameter("expertId") ;   
		String	 expertName = req.getParameter("expertName") ;
		ChatRoomVO chatRoom = new ChatRoomVO();
		chatRoom.setRoomId(roomId);
		chatRoom.setUserId(userId);
		chatRoom.setUserName(userName);
		chatRoom.setExpertId(expertId);
		chatRoom.setExpertName(expertName);
		ChatRoomVO exist = chatService.getChatRoomById(roomId);

		try {
			if (exist == null) {
				chatService.registChatRoom(chatRoom);
				return "new";
			} else {
				return "exist";
			}
		} catch (BizNotEffectedException e) {
			return "fail";
		}
	}
}
