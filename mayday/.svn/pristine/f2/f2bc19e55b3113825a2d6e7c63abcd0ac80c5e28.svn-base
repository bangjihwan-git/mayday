package com.mayday.member.web;

import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.mayday.common.vo.ResultMessageVO;
import com.mayday.exception.BizDuplicateKeyException;
import com.mayday.exception.BizNotEffectedException;
import com.mayday.exception.BizNotFoundException;
import com.mayday.member.service.IMemberService;
import com.mayday.member.service.MemberSearchVO;
import com.mayday.member.service.MemberVO;

@Controller
public class MemberController {

	private Logger logger = LoggerFactory.getLogger(getClass());
	@Inject
	IMemberService memberService;

	@RequestMapping("/member/memberList")
	public String memberList(@ModelAttribute("searchVO")MemberSearchVO searchVO,Model model) {
		logger.debug("멤버 목록");
		logger.debug("searchVO={}",searchVO);
		List<MemberVO> memberList = memberService.getMemberList(searchVO);
		model.addAttribute("memberList", memberList);
		model.addAttribute("searchVO", searchVO);
		return "member/memberList";
	}
	@RequestMapping("/member/memberView")
	public String getMember(@ModelAttribute("memId")String memId ,Model model) {
		logger.debug("memId={}",memId);
		try {
			MemberVO member = memberService.getMember(memId);
			model.addAttribute("member", member);
		} catch (BizNotFoundException e) {
			logger.debug("e={}",e);
			model.addAttribute("e", e);
		}
		return "member/memberView";
	}
	@RequestMapping("/member/modify")
	public String modify(@ModelAttribute("searchVO")MemberSearchVO searchVO,@ModelAttribute("member")MemberVO member ,Model model) {
		List<MemberVO> memberList = memberService.getMemberList(searchVO);
		ResultMessageVO resultMessage = new ResultMessageVO();
		try {
			memberService.Modify(member);
			resultMessage.setResult(true);
			resultMessage.setMessage("수정되었습니다.");
			resultMessage.setTitle("수정");
			resultMessage.setUrl("/member/memberView?boNo="+member.getMemId());
			resultMessage.setUrlTitle("해당 뷰");
		} catch (BizNotFoundException enf) {
			resultMessage.setResult(false);
			resultMessage.setMessage("실패: 해당 아이디를 찾지 못했습니다.");
			resultMessage.setTitle("수정");
			resultMessage.setUrl("/member/memberList");
			resultMessage.setUrlTitle("목록으로");
		} catch (BizNotEffectedException ene) {
			resultMessage.setResult(false);
			resultMessage.setMessage("실패: 수정 실패하였습니다.");
			resultMessage.setTitle("수정");
			resultMessage.setUrl("/member/memberView?boNo="+member.getMemId());
			resultMessage.setUrlTitle("목록으로");
		}
		model.addAttribute("memberList", memberList);
		return "redirect:/member/memberList";
	}
	@RequestMapping("/member/expertList")
	public String expertList(@ModelAttribute("searchVO")MemberSearchVO searchVO,Model model) {
		logger.debug("변호사 목록");
		logger.debug("searchVO={}",searchVO);
		List<MemberVO> expertList = memberService.getExpertList(searchVO);
		model.addAttribute("expertList", expertList);
		model.addAttribute("searchVO", searchVO);
		return "member/expertList";
	}
	@RequestMapping("/member/expertView")
	public String getExpert(@ModelAttribute("memId")String memId ,Model model) {
		logger.debug("변호사 상세보기");
		try {
			MemberVO expert = memberService.getMember(memId);
			model.addAttribute("expert", expert);
		} catch (BizNotFoundException e) {
			model.addAttribute("e", e);
		}
		return "member/expertView";
	}
	
	@RequestMapping(value = "/lawyer/regist", method = RequestMethod.POST, params = "memId")
	public ModelAndView insertLawyer(MemberVO member) {
		logger.debug("member={}", member);
		ModelAndView mav = new ModelAndView("/login/login");
		ResultMessageVO resultMessage = new ResultMessageVO();
		try {
			memberService.registLawyer(member);
			resultMessage.setResult(true);
			resultMessage.setMessage("등록되었습니다.");
			resultMessage.setTitle("등록");
			resultMessage.setUrl("/member/memberView?boNo="+member.getMemId());
			resultMessage.setUrlTitle("해당 뷰");
		}  catch (BizNotEffectedException e) {
			resultMessage.setResult(false);
			resultMessage.setMessage("실패: 해당 아이디를 찾지 못했습니다.");
			resultMessage.setTitle("수정");
			resultMessage.setUrl("/member/memberList");
			resultMessage.setUrlTitle("목록으로");
		}
		return mav;
		
		
	}
	@RequestMapping(value = "/member/regist", method = RequestMethod.POST, params = "memId")
	public ModelAndView insertMember(MemberVO member) {
		logger.debug("member={}", member);
		ModelAndView mav = new ModelAndView("/login/login");
		ResultMessageVO resultMessage = new ResultMessageVO();
		try {
			memberService.registMember(member);
			resultMessage.setResult(true);
			resultMessage.setMessage("등록되었습니다.");
			resultMessage.setTitle("등록");
			resultMessage.setUrl("/member/memberView?boNo="+member.getMemId());
			resultMessage.setUrlTitle("해당 뷰");
		}  catch (BizNotEffectedException e) {
			resultMessage.setResult(false);
			resultMessage.setMessage("실패: 해당 아이디를 찾지 못했습니다.");
			resultMessage.setTitle("수정");
			resultMessage.setUrl("/member/memberList");
			resultMessage.setUrlTitle("목록으로");
		}
		return mav;
	}
}
